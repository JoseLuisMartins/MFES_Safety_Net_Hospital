class SafetyNetNetwork 
instance variables
		private hospitals: inmap nat to Hospital := { |-> };
		private doctors: inmap nat to Doctor := { |-> };
		private patients: inmap nat to Patient := { |-> };
		private appointments: set of Appointment := {};
		private static networkInstance: SafetyNetNetwork := new SafetyNetNetwork();
		
		-- should the name be unique?
		inv not exists h1, h2 in set rng hospitals &
		h1 <> h2 and h1.getName() = h2.getName();
		-- invariant idea: a doctor should be at leat in a hospital to be in the network
operations
 /* 
		--main 
		public static main: () ==> ()
		main() ==
		(
			dcl safetyNet: SafetyNetNetwork := SafetyNetNetwork`getInstance();
				
			dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_Utils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
			dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_Utils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
			dcl doc1: Doctor := new Doctor("Jose", 26, <ORTOPEDIA>);
			dcl doc2: Doctor := new Doctor("Marcelo", 38, <CARDIOLOGIA>);
			
		  dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
			dcl pat2: Patient := new Patient("Maria", 38, "Doença pulmonar");
			
			safetyNet.addHospital(hos1);
			safetyNet.addHospital(hos2);
			
			safetyNet.addDoctor(doc1);
			safetyNet.addDoctor(doc2);
			
				
			safetyNet.addPatient(pat1);
			safetyNet.addPatient(pat2);
			
			safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
			safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
			safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());
			
			--dcl ap1: Appointment := new Appointment(mk_Utils`Date(2018,12,21,8,30), hos1.getId(), doc1.getId(), pat1.getId());
			--dcl ap2: Appointment := new Appointment(mk_Utils`Date(2018,12,21,8,30),hos1.getId(), doc2.getId(), pat1.getId());
			--dcl ap3: Appointment := new Appointment(mk_Utils`Date(2018,12,21,9,30),hos2.getId(), doc2.getId(),pat2.getId());
			
			safetyNet.addAppointment(new Appointment(mk_Utils`Date(2018,12,21,8,30), hos1.getId(), doc1.getId(), pat1.getId()));
			safetyNet.addAppointment(new Appointment(mk_Utils`Date(2018,12,21,9,30),hos2.getId(), doc2.getId(),pat2.getId()));
			
			IO`println("Network");
			IO`println(safetyNet);
			
			IO`println("All Hospitals");
			IO`println(safetyNet.getHospitals());
		
			IO`println("Hospitals by name");
			IO`println(safetyNet.getHospitalsByName("Hospital Sao Joao"));
		
			IO`println("Hospitals by city");
			IO`println(safetyNet.getHospitalsByCity("Lisboa"));
			
			IO`println("Hospitals specialties->1");
			IO`println(safetyNet.getHospitalSpecialties(hos1.getId()));
		
			IO`println("Hospitals specialties->2");
			IO`println(safetyNet.getHospitalSpecialties(hos2.getId()));
			
			IO`println("Hospitals number appointmens");
			IO`println(safetyNet.getHospitalNumberOfAppointments(hos1.getId()));
		
			IO`println("Hospitals where a doctor works");
			IO`println(safetyNet.getDoctorHospitals(doc1.getId()));
			
			
			IO`println("Removed doc1");
			safetyNet.removeDoctor(doc1);
			
				
			IO`println("Hospitals specialties->1");
			IO`println(safetyNet.getHospitalSpecialties(hos1.getId()));
		
			IO`println("Hospitals specialties->2");
			IO`println(safetyNet.getHospitalSpecialties(hos2.getId()));
				
			IO`println("Hospitals where a doctor works");
			IO`println(safetyNet.getDoctorHospitals(doc1.getId()));
			
			IO`println("Hospitals number appointmens");
			IO`println(safetyNet.getHospitalNumberOfAppointments(hos1.getId()));
			
			
		);

*/ 
		--constructor
		private SafetyNetNetwork: () ==> SafetyNetNetwork
		SafetyNetNetwork() == return self
		post hospitals = { |-> } and  doctors = { |-> };

		--get network instance
		public pure static getInstance: () ==> SafetyNetNetwork
		getInstance() == return networkInstance;

		
		--clear network instance
		public static clearInstance: () ==> ()
		clearInstance() == (
			networkInstance := new SafetyNetNetwork(); 
		);
	

		
		--associate doctor to hospital
		public associateDoctorToHospital : nat * nat ==> ()
			associateDoctorToHospital(hospitalId, doctorId) == (
				hospitals(hospitalId).addDoctor(doctorId)
		)
		pre hospitalId in set dom hospitals and doctorId in set dom doctors and doctorId not in set hospitals(hospitalId).getDoctorsIds()
	  post hospitalId in set dom hospitals and doctorId in set dom doctors and doctorId in set hospitals(hospitalId).getDoctorsIds();
				
		
		--disassociate doctor from hospital
		public disassociateDoctorFromHospital : nat * nat ==> ()
			disassociateDoctorFromHospital(hospitalId, doctorId) == (
				hospitals(hospitalId).removeDoctor(doctorId)
		)
		pre hospitalId in set dom hospitals and doctorId in set dom doctors and doctorId in set hospitals(hospitalId).getDoctorsIds()
		post hospitalId in set dom hospitals and doctorId in set dom doctors and doctorId not in set hospitals(hospitalId).getDoctorsIds();
				
		-----------------------------------------------------------
		------------------Hospital---------------------------------
		-----------------------------------------------------------
			-- get hospitals
		public pure getHospitals : () ==> inmap nat to Hospital
		getHospitals() == (
			return hospitals;
		);
				
		
			--add hospital
		public addHospital: Hospital ==> ()
		addHospital(hospital) == (
			hospitals := hospitals ++  { hospital.getId() |-> hospital};
		)
		pre {hospital.getId() } <: hospitals = { |-> } 
		post {hospital.getId() } <: hospitals = { hospital.getId() |-> hospital } ;
		
		--remove an hospital
		public removeHospital: Hospital ==> ()
		removeHospital(hospital) == (			
			hospitals := {hospital.getId()} <-: hospitals;
			--cancel doctor appointments
			for all a in set appointments do 
				if(a.getHospitalId() = hospital.getId()) then
					removeAppointment(a);
		)
	  pre {hospital.getId()} <: hospitals = { hospital.getId() |-> hospital } 
		post {hospital.getId()} <: hospitals = { |-> } and 
				 forall a in set appointments & a.getHospitalId() <> hospital.getId();
		
		----------Todo: add agreement to hospital
		----------Todo: remove agreement from hospital
		
		-------search hospitals------------------------------------
	
		----------get hospitals by id
		public pure getHospitalsById: nat ==> Hospital
			getHospitalsById(hospitalId) == (
				return hospitals(hospitalId);
			)
		pre hospitalId in set dom hospitals
		post RESULT.getId() = hospitalId;
			
		----------get hospitals by city
		public pure getHospitalsByCity: Utils`String ==> set of Hospital
			getHospitalsByCity(city) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
						if(h.getLocation().city = city) then
							res := res union {h};
				return res
			);
		
		----------get hospitals by name
		public pure getHospitalsByName: Utils`String ==> set of Hospital
			getHospitalsByName(name) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
						if(h.getName() = name) then
							res := res union {h};
				return res
			);
		
		----------Todo: get hospitals by agreement
		
			
		-------------------End hospital search--------------------------------
				
		-- get hospitals specialties
		public pure getHospitalSpecialties: nat ==> set of Utils`Specialty
			getHospitalSpecialties(hospitalId) == (
				dcl res : set of Utils`Specialty := {};
					for all doctorId in set hospitals(hospitalId).getDoctorsIds() do
							res := res union {doctors(doctorId).getSpecialty()};
				return res
			);
			
			--get hospital appointments
		public pure getHospitalAppointments: nat ==> set of Appointment
		getHospitalAppointments(hospitalId) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(a.getHospitalId() = hospitalId) then
						res := res union {a}; 
		
			return res
		);
		-- check doctor existence
		-- check type and id 

		-- total number of appointments in a hospital
		public pure getHospitalNumberOfAppointments: nat ==> nat
			getHospitalNumberOfAppointments(hospitalId) == (
				return card getHospitalAppointments(hospitalId);
			);
			
			
		---------------------------------------------------------------
		-----------------------end hospital ---------------------------
		---------------------------------------------------------------
		
		
		---------------------------------------------------------
		-----------------------Doctors --------------------------
		---------------------------------------------------------
		-- get doctors
		public pure getDoctors : () ==> inmap nat to Doctor
		getDoctors() == (
			return doctors;
		);
				
		--add doctor
		public addDoctor: Doctor ==> ()
		addDoctor(doctor) == (
			doctors := doctors ++  { doctor.getId() |-> doctor};
		)
		pre {doctor.getId() } <: doctors = { |-> }  
		post {doctor.getId() } <: doctors = { doctor.getId() |-> doctor };
		
		--remove doctor from the network and from all the hospitals where he works
		public removeDoctor: Doctor ==> ()
		removeDoctor(doctor) == (
			--remove doctor from network
			doctors := {doctor.getId()} <-: doctors;
			--remove doctor from hospitals where he works
			for all h in set rng hospitals do 
				if(doctor.getId() in set h.getDoctorsIds()) then
					h.removeDoctor(doctor.getId());
			--cancel doctor appointments
			for all a in set appointments do 
				if(a.getDoctorId() = doctor.getId()) then
					removeAppointment(a);
		)
	  pre {doctor.getId()} <: doctors = { doctor.getId() |-> doctor } 
		post {doctor.getId()} <: doctors = { |-> } and 
				 forall h in set rng hospitals & doctor.getId() not in set h.getDoctorsIds() and 
				 forall a in set appointments & a.getDoctorId() <> doctor.getId();
		
		
		--search doctors--------------------------------
		----------get doctor by specialty
		public pure getDoctorsBySpecialty: Utils`Specialty ==> set of Doctor
			getDoctorsBySpecialty(s) == (
				dcl res : set of Doctor := {};
				for all d in set rng doctors do
						if(d.getSpecialty() = s) then
							res := res union {d};
				return res
			);
		
		----------get doctor by id
		public pure getDoctorById: nat ==> Doctor
			getDoctorById(doctorId) == (
				return doctors(doctorId);
			)
		pre doctorId in set dom doctors
		post RESULT.getId() = doctorId;
			
		----------get hospitals where a doctor works
		public pure getDoctorHospitals: nat ==> set of Hospital
			getDoctorHospitals(doctorId) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
					if(doctorId in set h.getDoctorsIds()) then
						res := res union {h};
				return res
			);
			
		---------------------------------------------------------
		-----------------------End Doctors ----------------------
		---------------------------------------------------------
		
		
		-----------------------------------------------------------
		------------------Patients---------------------------------
		-----------------------------------------------------------
		
		--add patient
		public addPatient: Patient ==> ()
		addPatient(patient) == (
			patients := patients ++  { patient.getId() |-> patient};
		)
		pre {patient.getId() } <: patients = { |-> }  
		post {patient.getId() } <: patients = { patient.getId() |-> patient };
		
		--remove patient
		public removePatient: Patient ==> ()
		removePatient(patient) == (
			--remove patient from network
			patients := {patient.getId()} <-: patients;
			--remove patient appointments
			for all a in set appointments do 
				if(a.getPatientId() = patient.getId()) then
					removeAppointment(a);
		)
	  pre {patient.getId()} <: patients = { patient.getId() |-> patient } 
		post {patient.getId()} <: patients = { |-> } and forall a in set appointments & a.getPatientId() <> patient.getId();
			
		
		
		
		---------------------------------------------------------
		------------------End Patients-----------------------------
		-----------------------------------------------------------
		-- get patients
		public pure getPatients : () ==> inmap nat to Patient
		getPatients() == (
			return patients;
		);
		---------------------------------------------------------
		----------------------Appointments-----------------------
		---------------------------------------------------------
		
		-- get appointments
		public pure getAppointments : () ==> set of Appointment
		getAppointments() == (
			return appointments;
		);
		
		--get doctor appointments
		public pure getDoctorAppointments: nat ==> set of Appointment
		getDoctorAppointments(doctorId) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(a.getDoctorId() = doctorId) then
						res := res union {a}; 
			return res
		)
		pre {doctorId} <: doctors = { doctorId |-> doctors(doctorId) }
		post forall a in set RESULT & isofclass(Appointment,a) and a.getDoctorId() = doctorId;
		
		--get patient appointments
		public pure getPatientAppointments: nat ==> set of Appointment
		getPatientAppointments(patientId) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(a.getPatientId() = patientId) then
						res := res union {a}; 
			return res
		)
		pre {patientId} <: patients = { patientId |-> patients(patientId) }
		post forall a in set RESULT & isofclass(Appointment,a) and a.getPatientId() = patientId;
		
		
		--add an Appointment
		public addAppointment: Appointment ==> ()
		addAppointment(a) == (
			appointments := appointments union {a}; 
		)
		--this date verification should maybe consider the time of the appointment (it's a constant in the appointment class)
		pre a.getHospitalId() in set dom hospitals and -- |
				a.getDoctorId() in set dom doctors and     -- | ESTAS ACHO QUE NÂO SAO NECESSARIAS PORQUE JÀ TENHO NA CLASSE APPOINTMENT!!
				a.getPatientId() in set dom patients and   -- |
		    a.getDoctorId() in set hospitals(a.getHospitalId()).getDoctorsIds() and--check if the doctor works in that hospital
				forall d_ap in set getDoctorAppointments(a.getDoctorId()) & Utils`isDateDiferent(d_ap.getDate(), a.getDate()) and -- check if a doctor already has an appointment at the specified date
				forall p_ap in set getPatientAppointments(a.getPatientId()) & Utils`isDateDiferent(p_ap.getDate(), a.getDate())  -- check if a patient already has an appointment at the specified date
		post a in set appointments;
		
		--remove an Appointment
		public removeAppointment: Appointment ==> ()
		removeAppointment(a) == (
			appointments := appointments \ {a}; 
		)
		pre a in set appointments
		post a not in set appointments
		
		
		
		
		--get closest doctor available date
		--public getDoctorCloseDate: nat ==> Utils`Date
		--getDoctorCloseDate(doctorId) == (
		--	dcl doctorAppointments: set of Appointment := getDoctorAppointments();
			
	--	)
		--post forall ap in set getDoctorAppointments(a.getDoctorId()) & Utils`isDateDiferent(ap.getDate(), RESULT);
		
  	---------------------------------------------------------
		----------------------End Appointments-------------------
		---------------------------------------------------------
		
	
functions
-- TODO Define functiones here
end SafetyNetNetwork