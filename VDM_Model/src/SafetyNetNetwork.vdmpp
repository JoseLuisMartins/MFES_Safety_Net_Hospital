class SafetyNetNetwork 
instance variables
		private hospitals: inmap nat to Hospital := { |-> };
		private doctors: inmap nat to Doctor := { |-> };
		private patients: inmap nat to Patient := { |-> };
		private appointments: set of Appointment := {};
		private static networkInstance: SafetyNetNetwork := new SafetyNetNetwork();
		
		inv not exists h1, h2 in set rng hospitals &
		h1 <> h2 and h1.getName() = h2.getName();

operations

		--constructor
		private SafetyNetNetwork: () ==> SafetyNetNetwork
		SafetyNetNetwork() == return self
		post hospitals = { |-> } and  doctors = { |-> };

		--get network instance
		public pure static getInstance: () ==> SafetyNetNetwork
		getInstance() == return networkInstance
		post isofclass(SafetyNetNetwork,RESULT);

		
		--clear network instance
		public static clearInstance: () ==> ()
		clearInstance() == (
			networkInstance := new SafetyNetNetwork(); 
		);
		
		--associate doctor to hospital
		public associateDoctorToHospital : nat * nat ==> ()
			associateDoctorToHospital(hospitalId, doctorId) == (
				hospitals(hospitalId).addDoctor(doctorId)
		)
		pre hospitalId in set dom hospitals and doctorId in set dom doctors and doctorId not in set hospitals(hospitalId).getDoctorsIds()
	  post hospitalId in set dom hospitals and doctorId in set dom doctors and doctorId in set hospitals(hospitalId).getDoctorsIds();
				
		
		--disassociate doctor from hospital
		public disassociateDoctorFromHospital : nat * nat ==> ()
			disassociateDoctorFromHospital(hospitalId, doctorId) == (
				hospitals(hospitalId).removeDoctor(doctorId)
		)
		pre hospitalId in set dom hospitals and doctorId in set dom doctors and doctorId in set hospitals(hospitalId).getDoctorsIds()
		post hospitalId in set dom hospitals and doctorId in set dom doctors and doctorId not in set hospitals(hospitalId).getDoctorsIds();
				
		-----------------------------------------------------------
		------------------Hospital---------------------------------
		-----------------------------------------------------------
			-- get hospitals
		public pure getHospitals : () ==> inmap nat to Hospital
		getHospitals() == (
			return hospitals;
		);
				
		
			--add hospital
		public addHospital: Hospital ==> ()
		addHospital(hospital) == (
			hospitals := hospitals ++  { hospital.getId() |-> hospital};
		)
		pre {hospital.getId() } <: hospitals = { |-> } 
		post {hospital.getId() } <: hospitals = { hospital.getId() |-> hospital } ;
		
		--remove an hospital
		public removeHospital: Hospital ==> ()
		removeHospital(hospital) == (			
			hospitals := {hospital.getId()} <-: hospitals;
			--cancel doctor appointments
			for all a in set appointments do 
				if(a.getHospitalId() = hospital.getId()) then
					removeAppointment(a);
		)
	  pre {hospital.getId()} <: hospitals = { hospital.getId() |-> hospital } 
		post {hospital.getId()} <: hospitals = { |-> } and 
				 forall a in set appointments & a.getHospitalId() <> hospital.getId();
		
		-- add agreement to hospital
		public addAgreementToHospital: nat * ModelUtils`Agreement ==> ()
		addAgreementToHospital(hospitalId, agreement) == (
			hospitals(hospitalId).addAgreement(agreement);
		)
		pre {hospitalId} <: hospitals = { hospitalId |-> hospitals(hospitalId) };
		

		-- remove agreement from hospital
		public removeAgreementFromHospital: nat * ModelUtils`Agreement ==> ()
		removeAgreementFromHospital(hospitalId, agreement) == (
			hospitals(hospitalId).removeAgreement(agreement);
		)
		pre {hospitalId} <: hospitals = { hospitalId |-> hospitals(hospitalId) };
		
		-------search hospitals------------------------------------
	
		----------get hospitals by id
		public pure getHospitalsById: nat ==> Hospital
			getHospitalsById(hospitalId) == (
				return hospitals(hospitalId);
			)
		pre hospitalId in set dom hospitals
		post RESULT.getId() = hospitalId;
			
		----------get hospitals by city
		public pure getHospitalsByCity: ModelUtils`String ==> set of Hospital
			getHospitalsByCity(city) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
						if(h.getLocation().city = city) then
							res := res union {h};
				return res
			);
		
		----------get hospitals by name
		public pure getHospitalsByName: ModelUtils`String ==> set of Hospital
			getHospitalsByName(name) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
						if(h.getName() = name) then
							res := res union {h};
				return res
			);
		
		----------get hospitals by agreement
		public pure getHospitalsByAgreement: ModelUtils`Agreement ==> set of Hospital
			getHospitalsByAgreement(agreement) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
						if(agreement in set h.getAgreements()) then
							res := res union {h};
				return res
			);
			
		-------------------End hospital search--------------------------------
				
		-- get hospitals specialties
		public pure getHospitalSpecialties: nat ==> set of ModelUtils`Specialty
			getHospitalSpecialties(hospitalId) == (
				dcl res : set of ModelUtils`Specialty := {};
					for all doctorId in set hospitals(hospitalId).getDoctorsIds() do
							res := res union {doctors(doctorId).getSpecialty()};
				return res
			);
			
				
		---------------------------------------------------------------
		-----------------------end hospital ---------------------------
		---------------------------------------------------------------
		
		
		---------------------------------------------------------
		-----------------------Doctors --------------------------
		---------------------------------------------------------
		-- get doctors
		public pure getDoctors : () ==> inmap nat to Doctor
		getDoctors() == (
			return doctors;
		);
				
		--add doctor
		public addDoctor: Doctor ==> ()
		addDoctor(doctor) == (
			doctors := doctors ++  { doctor.getId() |-> doctor};
		)
		pre {doctor.getId() } <: doctors = { |-> }  
		post {doctor.getId() } <: doctors = { doctor.getId() |-> doctor };
		
		--remove doctor from the network and from all the hospitals where he works
		public removeDoctor: Doctor ==> ()
		removeDoctor(doctor) == (
			--remove doctor from network
			doctors := {doctor.getId()} <-: doctors;
			--remove doctor from hospitals where he works
			for all h in set rng hospitals do 
				if(doctor.getId() in set h.getDoctorsIds()) then
					h.removeDoctor(doctor.getId());
			--cancel doctor appointments
			for all a in set appointments do 
				if(a.getDoctorId() = doctor.getId()) then
					removeAppointment(a);
		)
	  pre {doctor.getId()} <: doctors = { doctor.getId() |-> doctor } 
		post {doctor.getId()} <: doctors = { |-> } and 
				 forall h in set rng hospitals & doctor.getId() not in set h.getDoctorsIds() and 
				 forall a in set appointments & a.getDoctorId() <> doctor.getId();
		
		
		--search doctors--------------------------------
		----------get doctor by specialty
		public pure getDoctorsBySpecialty: ModelUtils`Specialty ==> set of Doctor
			getDoctorsBySpecialty(s) == (
				dcl res : set of Doctor := {};
				for all d in set rng doctors do
						if(d.getSpecialty() = s) then
							res := res union {d};
				return res
			);
		
		----------get doctor by id
		public pure getDoctorById: nat ==> Doctor
			getDoctorById(doctorId) == (
				return doctors(doctorId);
			)
		pre doctorId in set dom doctors
		post RESULT.getId() = doctorId;
			
		----------get hospitals where a doctor works
		public pure getDoctorHospitals: nat ==> set of Hospital
			getDoctorHospitals(doctorId) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
					if(doctorId in set h.getDoctorsIds()) then
						res := res union {h};
				return res
			);
			
		---------------------------------------------------------
		-----------------------End Doctors ----------------------
		---------------------------------------------------------
		
		
		-----------------------------------------------------------
		------------------Patients---------------------------------
		-----------------------------------------------------------
		
		--add patient
		public addPatient: Patient ==> ()
		addPatient(patient) == (
			patients := patients ++  { patient.getId() |-> patient};
		)
		pre {patient.getId() } <: patients = { |-> }  
		post {patient.getId() } <: patients = { patient.getId() |-> patient };
		
		--remove patient
		public removePatient: Patient ==> ()
		removePatient(patient) == (
			--remove patient from network
			patients := {patient.getId()} <-: patients;
			--remove patient appointments
			for all a in set appointments do 
				if(a.getPatientId() = patient.getId()) then
					removeAppointment(a);
		)
	  pre {patient.getId()} <: patients = { patient.getId() |-> patient } 
		post {patient.getId()} <: patients = { |-> } and forall a in set appointments & a.getPatientId() <> patient.getId();
			
		--add clinical observation
		public addClinicalObservation: nat * ModelUtils`String ==> ()
		addClinicalObservation(patientId, obs) == (
			patients(patientId).addObservation(obs);
		)
	  pre {patientId} <: patients = { patientId |-> patients(patientId) } ;
	  
	  -- get patients
		public pure getPatients : () ==> inmap nat to Patient
		getPatients() == (
			return patients;
		);
		
		
		---------------------------------------------------------
		------------------End Patients-----------------------------
		-----------------------------------------------------------

		---------------------------------------------------------
		----------------------Appointments-----------------------
		---------------------------------------------------------
		
		-- get appointments
		public pure getAppointments : () ==> set of Appointment
		getAppointments() == (
			return appointments;
		);
		
		--get hospital appointments
		public pure getHospitalAppointments: nat ==> set of Appointment
		getHospitalAppointments(hospitalId) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(a.getHospitalId() = hospitalId) then
						res := res union {a}; 
		
			return res
		)
		pre {hospitalId} <: hospitals = { hospitalId |-> hospitals(hospitalId) }
		post forall a in set RESULT & isofclass(Appointment,a) and a.getHospitalId() = hospitalId;

		-- total number of appointments in a hospital
		public pure getHospitalNumberOfAppointments: nat ==> nat
			getHospitalNumberOfAppointments(hospitalId) == (
				return card getHospitalAppointments(hospitalId);
		)
		pre hospitalId in set dom hospitals;
			
		
		
		--get doctor appointments
		public pure getDoctorAppointments: nat ==> set of Appointment
		getDoctorAppointments(doctorId) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(a.getDoctorId() = doctorId) then
						res := res union {a}; 
			return res
		)
		pre {doctorId} <: doctors = { doctorId |-> doctors(doctorId) }
		post forall a in set RESULT & isofclass(Appointment,a) and a.getDoctorId() = doctorId;
		
		--get patient appointments
		public pure getPatientAppointments: nat ==> set of Appointment
		getPatientAppointments(patientId) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(a.getPatientId() = patientId) then
						res := res union {a}; 
			return res
		)
		pre {patientId} <: patients = { patientId |-> patients(patientId) }
		post forall a in set RESULT & isofclass(Appointment,a) and a.getPatientId() = patientId;
		
		--get specialty appointments
		public pure getSpecialtyAppointments: ModelUtils`Specialty ==> set of Appointment
		getSpecialtyAppointments(specialty) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(doctors(a.getDoctorId()).getSpecialty() = specialty) then
						res := res union {a}; 
			return res
		)
		post forall a in set RESULT & isofclass(Appointment,a) and doctors(a.getDoctorId()).getSpecialty() = specialty;
		
		
		--add an Appointment
		public addAppointment: Appointment ==> ()
		addAppointment(a) == (
			appointments := appointments union {a}; 
		)
		pre forall ap in set getDoctorAppointments(a.getDoctorId()) union getPatientAppointments(a.getPatientId()) & Appointment`appointmentDatesDontOverlap(ap.getDate(), a.getDate())
		post a in set appointments;
		
		--remove an Appointment
		public removeAppointment: Appointment ==> ()
		removeAppointment(a) == (
			appointments := appointments \ {a}; 
		)
		pre a in set appointments
		post a not in set appointments;
		
		
		
		-- get closest appointment date available given a set of appointments
		-- example: pass the appointments related to a specialty and it will return the closest appointment date available for that specialty as well as the doctor
		public getHospitalClosestAvailableDate: set of Appointment ==> ModelUtils`Date_DoctorId   
		 getHospitalClosestAvailableDate(appointmentSet) == (
			dcl minDate: ModelUtils`Date := ModelUtils`getMaxDate(); 
			dcl doctorId: nat;
			dcl availableDoctors: set of nat := {};
			dcl occupiedDates: set of ModelUtils`Date := {};
			
			for all ap in set appointmentSet do 
			(
				availableDoctors := availableDoctors union {ap.getDoctorId()};
				occupiedDates := occupiedDates union {ap.getDate()};
			);
			
			-- have to check if the first date is available
			occupiedDates := occupiedDates union {ModelUtils`getMinDate()};
			
			for all date in set occupiedDates do
			(
				dcl auxDate : ModelUtils`Date := Appointment`getNextAppointmentDate(date);
				if(ModelUtils`isDateLower(auxDate, minDate)) then
					for all docId in set availableDoctors do 		 
							if(forall docAp in set getDoctorAppointments(docId) &  Appointment`appointmentDatesDontOverlap(docAp.getDate(),auxDate)) then -- if the next appointment is on a closer date than the actual minimum and one of the doctor has the date slot available, update the minimum
							(
								doctorId := docId;
								minDate := auxDate;
							)
			);
			
			return mk_ModelUtils`Date_DoctorId(minDate, doctorId);
		)
		pre forall ap in set appointmentSet & ap in set appointments
		post RESULT.doctorId in set dom doctors;
		
  	---------------------------------------------------------
		----------------------End Appointments-------------------
		---------------------------------------------------------
		

end SafetyNetNetwork