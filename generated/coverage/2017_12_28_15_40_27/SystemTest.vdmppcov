class SystemTest is subclass of MyTestCase
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
		
		private safetyNet: SafetyNetNetwork := SafetyNetNetwork`getInstance();

operations


public static main: () ==> ()
main() == (
	
		dcl systemTest: SystemTest := new SystemTest();
	
		IO`println("network ");
	
		-- association hospital - doctor	
		IO`print("test associateADoctorToAnHospital -> ");
		systemTest.testAssociateDoctorToAnHospital();
		IO`println("Success");
		
		IO`print("test disassociateADoctorToAnHospital -> ");
		systemTest.testDisassociateDoctorToAnHospital();
		IO`println("Success");
		
		
		-- Hospital
		IO`print("test addHospital -> ");
		systemTest.testAddHospital();
		IO`println("Success");

		IO`print("test removeHospital -> ");
		systemTest.testRemoveHospital();
		IO`println("Success");
		
		IO`print("test getAllHospitalsByLocation -> ");
		systemTest.testGetHospitalsByLocation();
		IO`println("Success");
		
		IO`print("test getAllHospitals -> ");
		systemTest.testGetAllHospitals();
		IO`println("Success");
		
		IO`print("test getHospitalsByName -> ");
		systemTest.testGetHospitalsByName();
		IO`println("Success");
		
		IO`print("test getHospitalsById -> ");
		systemTest.testGetHospitalsById();
		IO`println("Success");
		
		IO`print("test getHospitalsByAgreement -> ");
		systemTest.testGetHospitalsByAgreement();
		IO`println("Success");
		
		IO`print("test getHospitalSpecialties -> ");
		systemTest.testGetHospitalSpecialties();
		IO`println("Success");

		-- Doctor
		IO`print("test addDoctor -> ");
		systemTest.testAddDoctor();
		IO`println("Success");
		
		IO`print("test getDoctors -> ");
		systemTest.testGetAllDoctors();
		IO`println("Success");
		
		IO`print("test removeDoctor -> ");
		systemTest.testRemoveDoctor();
		IO`println("Success");
		
		IO`print("test getDoctorHospitals -> ");
		systemTest.testGetDoctorHospitals();
		IO`println("Success");
		
		IO`print("test getDoctorBySpecialtie-> ");
		systemTest.testGetDoctorBySpecialtie();
		IO`println("Success");
		
		IO`print("test getDoctorById -> ");
		systemTest.testGetDoctorById();
		IO`println("Success");
		
		-- Patient
		IO`print("test addPatient -> ");
		systemTest.testAddPatient();
		IO`println("Success");
		
		IO`print("test removePatient -> ");
		systemTest.testRemovePatient();
		IO`println("Success");
		
		IO`print("test addObservation -> ");
		systemTest.testAddObservation();
		IO`println("Success");
		
		
		-- Appointement
		
		IO`print("test addAppointment -> ");
		systemTest.testAddAppointment();
		IO`println("Success");
				
		IO`print("test removeAppointment -> ");
		systemTest.testRemoveAppointment();
		IO`println("Success");
		
		IO`print("test getSpecialtyAppointments -> ");
		systemTest.testGetSpecialtyAppointments();
		IO`println("Success");
		
		IO`print("test getHospitalClosestAvailableDate -> ");
		systemTest.testGetHospitalClosestAvailableDate();
		IO`println("Success");
		
		IO`print("test getNextAppointmentDate -> ");
		systemTest.testGetNextAppointmentDate();
		IO`println("Success");
		
		-- Agreement
		
		IO`print("test addAgreement-> ");
		systemTest.testAddAgreement();
		IO`println("Success");
				
		IO`print("test removeAgreement -> ");
		systemTest.testRemoveAgreement();
		IO`println("Success");
			
);


private testAddDoctor: () ==> ()
	testAddDoctor () == (
	
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		
		assertEqual(doc1.getName(), "jose");
		assertEqual(doc2.getName(), "marcelo");
		
		assertEqual(doc1.getAge(), 35);
		assertEqual(doc2.getAge(), 40); 
		
		assertEqual(doc1.getSpecialty(), <ORTOPEDIA>);
		assertEqual(doc2.getSpecialty(), <CARDIOLOGIA>);
		
		assertEqual( safetyNet.getDoctors(), {doc1.getId() |-> doc1, doc2.getId() |->doc2});
		
		safetyNet.clearInstance();
				
);

private testGetAllDoctors: () ==> ()
	testGetAllDoctors () == (
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		
		safetyNet := SafetyNetNetwork`getInstance();

		assertEqual(rng safetyNet.getDoctors(), {});
			
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);

		assertEqual( safetyNet.getDoctors(), {doc1.getId() |-> doc1, doc2.getId() |->doc2});
		
		safetyNet.clearInstance();
				
);

private testRemoveDoctor: () ==> ()
	testRemoveDoctor () == (
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
			
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		
		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());
		
		safetyNet.removeDoctor(doc2);

		-- check if was removed from the system
		assertEqual( safetyNet.getDoctors(), {doc1.getId() |-> doc1});
		
		-- check if the doctor was removed from all hospitals where he worked
		for all hs in set rng safetyNet.getHospitals() do
			assertFalse(doc2.getId() in set hs.getDoctorsIds());
		
		safetyNet.clearInstance();
				
);

private testAddHospital: () ==> ()
	testAddHospital () == (
		
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		assertEqual(safetyNet.getHospitals(), { hos1.getId() |-> hos1, hos2.getId() |-> hos2});
		
		safetyNet.clearInstance();
				
);

private testRemoveHospital: () ==> ()
	testRemoveHospital () == (
		
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);

		safetyNet.removeHospital(hos1);

		assertEqual(safetyNet.getHospitals(), { hos2.getId() |-> hos2});
		
		safetyNet.clearInstance();
				
);

-- change test
private testAssociateDoctorToAnHospital: () ==> ()
	testAssociateDoctorToAnHospital () == (
	
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});	
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());
		
		assertEqual(hos1.getDoctorsIds(), {doc1.getId()});
		assertEqual(hos2.getDoctorsIds(), {doc1.getId(),doc2.getId()});

		assertEqual( safetyNet.getDoctors(), {doc1.getId() |-> doc1, doc2.getId() |->doc2});
		
		safetyNet.clearInstance();
				
);
-- change test
private testDisassociateDoctorToAnHospital: () ==> ()
	testDisassociateDoctorToAnHospital () == (
	
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});		
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());
		
		
		safetyNet.disassociateDoctorFromHospital(hos2.getId(), doc1.getId());

		assertEqual(hos1.getDoctorsIds(), {doc1.getId()});
		assertEqual(hos2.getDoctorsIds(), {doc2.getId()});
		
		assertEqual( safetyNet.getDoctors(), {doc1.getId() |-> doc1, doc2.getId() |->doc2});
		
		safetyNet.clearInstance();
				
);

private testGetHospitalsByLocation: () ==> ()
	testGetHospitalsByLocation () == (
			
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		dcl hos3: Hospital := new Hospital("Hospital de Santo Antonio",mk_ModelUtils`Location("Lisboa", "Avenida de Santo antonio, n� 300","4750-559"), {<ADSE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		safetyNet.addHospital(hos3);
	
		assertEqual(safetyNet.getHospitalsByCity("Porto"), {hos1});
		assertEqual(safetyNet.getHospitalsByCity("Lisboa"), {hos2, hos3});
	
		safetyNet.clearInstance();
);

private testGetHospitalsByAgreement: () ==> ()
	testGetHospitalsByAgreement () == (
			
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		dcl hos3: Hospital := new Hospital("Hospital de Santo Antonio",mk_ModelUtils`Location("Lisboa", "Avenida de Santo antonio, n� 300","4750-559"), {<ADSE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		safetyNet.addHospital(hos3);
	
		assertEqual(safetyNet.getHospitalsByAgreement(<ADSE>), {hos1, hos2, hos3});
		assertEqual(safetyNet.getHospitalsByAgreement(<MEDIS>), {hos2});
		assertEqual(safetyNet.getHospitalsByAgreement(<MULTICARE>), {hos2});
		assertEqual(safetyNet.getHospitalsByAgreement(<MEDICARE>), {hos1});
		
		safetyNet.clearInstance();
);

private testGetHospitalsById: () ==> ()
	testGetHospitalsById () == (
			
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		dcl hos3: Hospital := new Hospital("Hospital de Santo Antonio",mk_ModelUtils`Location("Lisboa", "Avenida de Santo antonio, n� 300","4750-559"), {<ADSE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		safetyNet.addHospital(hos3);
	
		assertEqual(safetyNet.getHospitalsById(hos1.getId()), hos1);
		assertEqual(safetyNet.getHospitalsById(hos2.getId()), hos2);
		assertEqual(safetyNet.getHospitalsById(hos3.getId()), hos3);
	
		safetyNet.clearInstance();
);

private testGetAllHospitals: () ==> ()
	testGetAllHospitals () == (
		
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		dcl hos3: Hospital := new Hospital("Hospital de Santo Antonio",mk_ModelUtils`Location("Lisboa", "Avenida de Santo antonio, n� 300","4750-559"), {<ADSE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		safetyNet.addHospital(hos3);
	
		assertEqual(safetyNet.getHospitals(), {hos1.getId() |-> hos1, hos2.getId() |-> hos2, hos3.getId() |->hos3});
	
		safetyNet.clearInstance();
);

private testGetHospitalsByName: () ==> ()
	testGetHospitalsByName () == (
		
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		dcl hos3: Hospital := new Hospital("Hospital de Santo Antonio",mk_ModelUtils`Location("Lisboa", "Avenida de Santo antonio, n� 300","4750-559"), {<ADSE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		safetyNet.addHospital(hos3);
	
		assertEqual(safetyNet.getHospitalsByName("Hospital Sao Joao"), {hos1});
		assertEqual(safetyNet.getHospitalsByName("Hospital da Luz Lisboa"), {hos2});
		assertEqual(safetyNet.getHospitalsByName("Hospital de Santo Antonio"), {hos3});
		
		safetyNet.clearInstance();
);

private testGetDoctorHospitals: () ==> ()
	testGetDoctorHospitals () == (
	
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		dcl doc3: Doctor := new Doctor("joaquim",50,<CARDIOLOGIA>);
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		safetyNet.addDoctor(doc3);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());

		assertEqual(safetyNet.getDoctorHospitals(doc1.getId()), {hos1, hos2});
		assertEqual(safetyNet.getDoctorHospitals(doc2.getId()), {hos2});
		assertEqual(safetyNet.getDoctorHospitals(doc3.getId()), {});		
		
		safetyNet.clearInstance();
				
);

private testGetDoctorBySpecialtie: () ==> ()
	testGetDoctorBySpecialtie () == (
	
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		dcl doc3: Doctor := new Doctor("joaquim",50,<CARDIOLOGIA>);
		
		safetyNet := SafetyNetNetwork`getInstance();
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		safetyNet.addDoctor(doc3);

		assertEqual(safetyNet.getDoctorsBySpecialty(<ORTOPEDIA>), {doc1});
		assertEqual(safetyNet.getDoctorsBySpecialty(<OFTALMOLOGIA>), {});
		assertEqual(safetyNet.getDoctorsBySpecialty(<CARDIOLOGIA>), {doc2, doc3});		
		
		safetyNet.clearInstance();
				
);

private testGetHospitalSpecialties: () ==> ()
	testGetHospitalSpecialties () == (
	
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		dcl doc3: Doctor := new Doctor("joaquim",50,<CARDIOLOGIA>);
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		safetyNet.addDoctor(doc3);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());

		assertEqual(safetyNet.getHospitalSpecialties(hos1.getId()), {<ORTOPEDIA>});
		assertEqual(safetyNet.getHospitalSpecialties(hos2.getId()), {<ORTOPEDIA>, <CARDIOLOGIA>});		
		
		safetyNet.clearInstance();
				
);

private testGetDoctorById: () ==> ()
	testGetDoctorById () == (
			
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		dcl doc3: Doctor := new Doctor("joaquim",50,<CARDIOLOGIA>);
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		safetyNet.addDoctor(doc3);
		
		assertEqual(safetyNet.getDoctorById(doc1.getId()), doc1);
		assertEqual(safetyNet.getDoctorById(doc2.getId()), doc2);
		assertEqual(safetyNet.getDoctorById(doc3.getId()), doc3);
	
		safetyNet.clearInstance();
);

private testAddPatient: () ==> ()
	testAddPatient () == (
	
		dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
		dcl pat2: Patient := new Patient("Maria", 38, "Doença pulmonar");
			
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addPatient(pat1);
		safetyNet.addPatient(pat2);
		
		assertEqual(pat1.getName(), "Susana");
		assertEqual(pat2.getName(), "Maria");
		
		assertEqual(pat1.getAge(), 26);
		assertEqual(pat2.getAge(), 38); 

		assertEqual( safetyNet.getPatients(), {pat1.getId() |-> pat1, pat2.getId() |-> pat2});
		
		safetyNet.clearInstance();
				
);

private testRemovePatient: () ==> ()
	testRemovePatient () == (
	
		dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
		dcl pat2: Patient := new Patient("Maria", 38, "Doença pulmonar");
			
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addPatient(pat1);
		safetyNet.addPatient(pat2);
		
		safetyNet.removePatient(pat2);

		assertEqual( safetyNet.getPatients(), {pat1.getId() |-> pat1});
		
		safetyNet.clearInstance();
				
);

private testAddAppointment: () ==> ()
	testAddAppointment () == (
	
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		dcl doc3: Doctor := new Doctor("joaquim",50,<CARDIOLOGIA>);
		
		dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
		dcl pat2: Patient := new Patient("Maria", 38, "Doença pulmonar");
		
		dcl dt1: set of ModelUtils`Date := {};
		dcl dt2: set of ModelUtils`Date := {};
		
		dcl pt1: set of ModelUtils`Date := {};
		dcl pt2: set of ModelUtils`Date := {};
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		safetyNet.addDoctor(doc3);
		
		safetyNet.addPatient(pat1);
		safetyNet.addPatient(pat2);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());

		assertEqual(card safetyNet.getDoctorAppointments(doc1.getId()), 0);
		assertEqual(card safetyNet.getDoctorAppointments(doc2.getId()), 0);

		safetyNet.addAppointment(new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos1.getId(), doc1.getId(), pat1.getId()));
		safetyNet.addAppointment(new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos2.getId(), doc2.getId(), pat2.getId()));

		-- doctor appointments
		assertEqual(card safetyNet.getDoctorAppointments(doc1.getId()), 1);
		for all a in set safetyNet.getDoctorAppointments(doc1.getId()) do (
			dt1 := dt1 union {a.getDate()};
			assertEqual(a.getDoctorId(), doc1.getId());
			assertTrue(a.getDate().year > 2017 and a.getDate().month <= 12 and a.getDate().day < 31 and a.getDate().hour < 24 and a.getDate().min < 60);
		);
		assertEqual(card dt1, card safetyNet.getDoctorAppointments(doc1.getId()));
		
		assertEqual(card safetyNet.getDoctorAppointments(doc2.getId()), 1);
		for all a in set safetyNet.getDoctorAppointments(doc2.getId()) do (
			dt2 := dt2 union {a.getDate()};
			assertEqual(a.getDoctorId(), doc2.getId());
			assertTrue(a.getDate().year > 2017 and a.getDate().month <= 12 and a.getDate().day < 31 and a.getDate().hour < 24 and a.getDate().min < 60);
		);
		assertEqual(card dt2, card safetyNet.getDoctorAppointments(doc2.getId()));
		
		
		assertEqual(card safetyNet.getDoctorAppointments(doc3.getId()), 0);
		
		
		-- patient appointments
		assertEqual(card safetyNet.getPatientAppointments(pat1.getId()), 1);
		for all a in set safetyNet.getPatientAppointments(pat1.getId()) do (
			pt1 := pt1 union {a.getDate()};
			assertEqual(a.getPatientId(), pat1.getId());
			assertTrue(a.getDate().year > 2017 and a.getDate().month <= 12 and a.getDate().day < 31 and a.getDate().hour < 24 and a.getDate().min < 60);
		);
		assertEqual(card pt1, card safetyNet.getPatientAppointments(pat1.getId()));
		
		
		assertEqual(card safetyNet.getPatientAppointments(pat2.getId()), 1);
		for all a in set safetyNet.getPatientAppointments(pat2.getId()) do (
			pt2 := pt2 union {a.getDate()};
			assertEqual(a.getPatientId(), pat2.getId());
			assertTrue(a.getDate().year > 2017 and a.getDate().month <= 12 and a.getDate().day < 31 and a.getDate().hour < 24 and a.getDate().min < 60);
		);
		assertEqual(card pt2, card safetyNet.getPatientAppointments(pat2.getId()));
		
		-- system
		assertEqual(card safetyNet.getAppointments(), 2);
		
		-- hospital
		assertEqual(safetyNet.getHospitalNumberOfAppointments(hos1.getId()), 1);
		for all a in set safetyNet.getHospitalAppointments(hos1.getId()) do (
			pt1 := pt1 union {a.getDate()};
			assertEqual(a.getHospitalId(), hos1.getId());
			assertTrue(a.getDoctorId() in set hos1.getDoctorsIds());
			assertTrue(a.getDate().year > 2017 and a.getDate().month <= 12 and a.getDate().day < 31 and a.getDate().hour < 24 and a.getDate().min < 60);
		);
			
		assertEqual(safetyNet.getHospitalNumberOfAppointments(hos2.getId()), 1);		
		for all a in set safetyNet.getHospitalAppointments(hos2.getId()) do (
			pt1 := pt1 union {a.getDate()};
			assertEqual(a.getHospitalId(), hos2.getId());
			assertTrue(a.getDoctorId() in set hos2.getDoctorsIds());
			assertTrue(a.getDate().year > 2017 and a.getDate().month <= 12 and a.getDate().day < 31 and a.getDate().hour < 24 and a.getDate().min < 60);
		);
		
		
		safetyNet.clearInstance();
				
);


 
private testRemoveAppointment: () ==> ()
	testRemoveAppointment () == (
	
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		dcl doc3: Doctor := new Doctor("joaquim",50,<CARDIOLOGIA>);
		
		dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
		dcl pat2: Patient := new Patient("Maria", 38, "Doença pulmonar");
		
		dcl app1: Appointment;
		dcl app2: Appointment;
		dcl app3: Appointment;
		dcl app4: Appointment;
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		safetyNet.addDoctor(doc3);
		
		safetyNet.addPatient(pat1);
		safetyNet.addPatient(pat2);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());

		assertEqual(card safetyNet.getDoctorAppointments(doc1.getId()), 0);
		assertEqual(card safetyNet.getDoctorAppointments(doc2.getId()), 0);

		app1 := new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos1.getId(), doc1.getId(), pat1.getId());
		app2 := new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos2.getId(), doc2.getId(), pat2.getId());

		
		-- add Appointment (app1, app2)
		safetyNet.addAppointment(app1);
		safetyNet.addAppointment(app2);


		-- remove Appointment
		assertTrue(app2 in set safetyNet.getAppointments());
		
		safetyNet.removeAppointment(app2);
		
		assertTrue(app2 not in set safetyNet.getAppointments());
		
		-- verification of data
		
		-- doctor appointments
		assertEqual(safetyNet.getDoctorAppointments(doc1.getId()), {app1});
		assertEqual(safetyNet.getDoctorAppointments(doc2.getId()), {});
		assertEqual(safetyNet.getDoctorAppointments(doc3.getId()), {});
		
		-- patient appointments
		assertEqual(safetyNet.getPatientAppointments(pat1.getId()), {app1});
		assertEqual(safetyNet.getPatientAppointments(pat2.getId()), {});

		-- system
		assertEqual(card safetyNet.getAppointments(), 1);
		assertEqual(safetyNet.getAppointments(), {app1});
		
		-- hospital
		assertEqual(safetyNet.getHospitalNumberOfAppointments(hos1.getId()), 1);
		assertEqual(safetyNet.getHospitalNumberOfAppointments(hos2.getId()), 0);		


		-- remove a doctor and all his appointments
		app3 := new Appointment(mk_ModelUtils`Date(2018,01,21,8,30), hos2.getId(), doc2.getId(), pat1.getId());
		safetyNet.addAppointment(app3);
		
		safetyNet.removeDoctor(doc2);
		
		assertEqual(safetyNet.getAppointments(), {app1});	
		
		
		-- remove a patient and all his appointments
		
		safetyNet.addDoctor(doc2);
		
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());
				
		app2 := new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos2.getId(), doc2.getId(), pat2.getId());
		app4 := new Appointment(mk_ModelUtils`Date(2018,01,15,8,30), hos2.getId(), doc1.getId(), pat1.getId());
		
		safetyNet.addAppointment(app2);
		safetyNet.addAppointment(app4);
		
		safetyNet.removePatient(pat1);
		
		assertEqual(safetyNet.getAppointments(), {app2});	
		
		safetyNet.removeAppointment(app2);
		
		-- remove an hospital and all his appointments
		
		safetyNet.addPatient(pat1);
		safetyNet.addAppointment(app1);
		safetyNet.addAppointment(app2);
		safetyNet.addAppointment(app3);
		safetyNet.addAppointment(app4);
		
		assertEqual(safetyNet.getAppointments(), {app1, app2, app3, app4});	
		
		safetyNet.removeHospital(hos2);
		
		assertEqual(safetyNet.getAppointments(), {app1});
		
		assertTrue(forall a in set safetyNet.getAppointments() & a.getHospitalId() <> hos2.getId());	
		
		safetyNet.clearInstance();
				
);

private testAddAgreement: () ==> ()
	testAddAgreement () == (
		
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		assertEqual(hos1.getAgreements(), {<ADSE>,<MEDICARE>});
		
		safetyNet.addAgreementToHospital(hos1.getId(),<MULTICARE>);
		
		assertEqual(hos1.getAgreements(), {<ADSE>,<MEDICARE>, <MULTICARE>});
		
		safetyNet.clearInstance();
				
);

private testRemoveAgreement: () ==> ()
	testRemoveAgreement () == (
		
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.removeAgreementFromHospital(hos1.getId(),<ADSE>);
		
		assertEqual(hos1.getAgreements(), {<MEDICARE>});
		
		safetyNet.clearInstance();
				
);


private testAddObservation: () ==> ()
	testAddObservation () == (
		
		dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
		dcl pat2: Patient := new Patient("Maria", 38, "Doenca pulmonar");
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addPatient(pat1);
		safetyNet.addPatient(pat2);

		assertEqual(pat1.getClinicalObservations(), ["Gripe"]);
		assertEqual(pat2.getClinicalObservations(), ["Doenca pulmonar"]);
		
		safetyNet.addClinicalObservation(pat1.getId(), "Pneumonia");
		safetyNet.addClinicalObservation(pat1.getId(), "Varicela");

		assertEqual(pat1.getClinicalObservations(), ["Gripe", "Pneumonia", "Varicela"]);
		assertEqual(pat2.getClinicalObservations(), ["Doenca pulmonar"]);	
			
		safetyNet.clearInstance();
				
);


private testGetSpecialtyAppointments: () ==> ()
	testGetSpecialtyAppointments () == (
	
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		dcl doc3: Doctor := new Doctor("joaquim",50,<CARDIOLOGIA>);
		
		dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
		dcl pat2: Patient := new Patient("Maria", 38, "Doença pulmonar");
		
		dcl app1: Appointment;
		dcl app2: Appointment;
		dcl app3: Appointment;
		dcl app4: Appointment;
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		safetyNet.addDoctor(doc3);
		
		safetyNet.addPatient(pat1);
		safetyNet.addPatient(pat2);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());

		app1 := new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos1.getId(), doc1.getId(), pat1.getId());
		app2 := new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos2.getId(), doc2.getId(), pat2.getId());
		app3 := new Appointment(mk_ModelUtils`Date(2018,01,21,8,30), hos2.getId(), doc2.getId(), pat1.getId());
		app4 := new Appointment(mk_ModelUtils`Date(2018,01,15,8,30), hos2.getId(), doc1.getId(), pat1.getId());
				
		-- add Appointment
		safetyNet.addAppointment(app1);
		safetyNet.addAppointment(app2);
		safetyNet.addAppointment(app3);
		safetyNet.addAppointment(app4);
		
		assertEqual(safetyNet.getSpecialtyAppointments(<ORTOPEDIA>), {app1, app4});
		assertEqual(safetyNet.getSpecialtyAppointments(<CARDIOLOGIA>), {app2, app3});
		assertEqual(safetyNet.getSpecialtyAppointments(<GINECOLOGIA>), {});
		
		
		safetyNet.clearInstance();
				
);

private testGetHospitalClosestAvailableDate: () ==> ()
	testGetHospitalClosestAvailableDate () == (
	
		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		dcl hos2: Hospital := new Hospital("Hospital da Luz Lisboa",mk_ModelUtils`Location("Lisboa", "Avenida Lusíada, nº 100","4700-959"), {<ADSE>,<MEDIS>, <MULTICARE>});
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
		dcl doc3: Doctor := new Doctor("joaquim",50,<CARDIOLOGIA>);
		
		dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
		dcl pat2: Patient := new Patient("Maria", 38, "Doença pulmonar");
		
		dcl app1: Appointment;
		dcl app2: Appointment;
		dcl app3: Appointment;
		dcl app4: Appointment;
		
		dcl res: ModelUtils`Date_DoctorId;
		
		safetyNet := SafetyNetNetwork`getInstance();
			
		safetyNet.addHospital(hos1);
		safetyNet.addHospital(hos2);
		
		safetyNet.addDoctor(doc1);
		safetyNet.addDoctor(doc2);
		safetyNet.addDoctor(doc3);
		
		safetyNet.addPatient(pat1);
		safetyNet.addPatient(pat2);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
		safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());
		safetyNet.associateDoctorToHospital(hos1.getId(), doc3.getId());
		safetyNet.associateDoctorToHospital(hos1.getId(), doc3.getId());
		
				
		app1 := new Appointment(mk_ModelUtils`Date(2018,01,01,8,30), hos2.getId(), doc1.getId(), pat1.getId());
		app2 := new Appointment(mk_ModelUtils`Date(2018,01,01,8,30), hos2.getId(), doc2.getId(), pat2.getId());
		app3 := new Appointment(mk_ModelUtils`Date(2018,01,01,9,00), hos1.getId(), doc1.getId(), pat1.getId());
		app4 := new Appointment(mk_ModelUtils`Date(2018,01,01,9,30), hos2.getId(), doc2.getId(), pat2.getId());

				
		-- add Appointment
		safetyNet.addAppointment(app1);
		safetyNet.addAppointment(app2);
		safetyNet.addAppointment(app3);
		safetyNet.addAppointment(app4);
	
		--assertFalse(Appointment`appointmentDatesDontOverlap(app1.getDate(), mk_ModelUtils`Date(2018,01,15,8,30)));
		
		res := safetyNet.getHospitalClosestAvailableDate({app1, app2, app3, app4});	
		IO`print(res);
		IO`print(doc1.getId());
		IO`print(doc2.getId());
		assertEqual(res, mk_ModelUtils`Date_DoctorId(mk_ModelUtils`Date(2018,1,1,9,00), doc2.getId()));
		
		safetyNet.clearInstance();
				
);


private testGetNextAppointmentDate: () ==> ()
	testGetNextAppointmentDate () == (
	
		-- next day
		assertEqual(Appointment`getNextAppointmentDate(mk_ModelUtils`Date(2018,12,12,23,45)) ,mk_ModelUtils`Date(2018,12,13,0,15));
		-- next year
		assertEqual(Appointment`getNextAppointmentDate(mk_ModelUtils`Date(2018,12,30,23,45)) ,mk_ModelUtils`Date(2019,1,1,0,15));
		-- next month
		assertEqual(Appointment`getNextAppointmentDate(mk_ModelUtils`Date(2018,10,30,23,45)) ,mk_ModelUtils`Date(2018,11,1,0,15));
		-- next 30 min
		assertEqual(Appointment`getNextAppointmentDate(mk_ModelUtils`Date(2018,10,15,10,30)) ,mk_ModelUtils`Date(2018,10,15,11,0));
	
);

/*

	Tests containing invalid inputs (should be tested one at a time)
*/

public testFailForgotToAddDoctor: () ==> ()
	testFailForgotToAddDoctor () == (
	
			dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
			dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
			
			safetyNet.clearInstance();
			
			safetyNet := SafetyNetNetwork`getInstance();
			
			safetyNet.addHospital(hos1);
				
			-- you can not associate a doctor to an hospital if that doctor was not added to the network	
			safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
			
			safetyNet.clearInstance();
);
 
 
 public testFailForgotToAddHospital: () ==> ()
 	testFailForgotToAddHospital () == (
 	
 			dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
			dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
			
			safetyNet.clearInstance();			
			
			safetyNet := SafetyNetNetwork`getInstance();
			
			safetyNet.addDoctor(doc1);
				
			-- you can not associate a doctor to an hospital if that hospital was not added to the network	
			safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
			
			safetyNet.clearInstance();
 	
 	);
 
 
 public testFailCanNotRemoveAnAgreement: () ==> ()
 	testFailCanNotRemoveAnAgreement () == (
 	
 			dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
 		
 			safetyNet.clearInstance();
 			
 			safetyNet := SafetyNetNetwork`getInstance();
			
			safetyNet.addHospital(hos1);
			
			-- it is not possible to remove an agreement from an hospital if that agreement didn't exist already
			safetyNet.removeAgreementFromHospital(hos1.getId(),<MEDIS>);
			
			safetyNet.clearInstance();
			
 	);
 	
 	
 
 	public testFailSearchForADoctor: () ==> ()
 		testFailSearchForADoctor () == (
 		
 			dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
			dcl doc2: Doctor;
			
			safetyNet.clearInstance();
			
			safetyNet := SafetyNetNetwork`getInstance();
			
			doc2 := safetyNet.getDoctorById(doc1.getId());
			
			safetyNet.clearInstance();
 		
 	);
 	
 	
 	public testFailDisassociatingADoctorFromAnHospital: () ==> ()
 		testFailDisassociatingADoctorFromAnHospital () == (
 		
 			dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
 		
 			dcl doc2: Doctor := new Doctor("marcelo", 40 ,<CARDIOLOGIA>);
 			
 			safetyNet.clearInstance();
 			
 			safetyNet := SafetyNetNetwork`getInstance();
 		
 			-- you can not remove a doctor from an hospital if previously that doctor was not associated to that hospital
 			safetyNet.disassociateDoctorFromHospital(hos1.getId(), doc2.getId());
 		
 			safetyNet.clearInstance();
 		);
 
 
 public testFailCreatingAnAppointment: () ==> ()
 	testFailCreatingAnAppointment () == (
 		dcl hos1: Hospital := new Hospital("Hospital Sao Joao",mk_ModelUtils`Location("Porto", "Alameda Prof. Hernâni Monteiro","4200-319"), {<ADSE>,<MEDICARE>});
		
		dcl doc1: Doctor := new Doctor("jose",35,<ORTOPEDIA>);
		
		dcl pat1: Patient := new Patient("Susana", 26, "Gripe");
		dcl pat2: Patient := new Patient("Maria", 38, "Doença pulmonar");
		
		dcl app1: Appointment;
		dcl app2: Appointment;
 	
 		safetyNet.clearInstance();
 			
 		safetyNet := SafetyNetNetwork`getInstance();
 		
 		safetyNet.addHospital(hos1);
				
		safetyNet.addDoctor(doc1);
		
		safetyNet.addPatient(pat1);
		safetyNet.addPatient(pat2);

		safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());

		app1 := new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos1.getId(), doc1.getId(), pat1.getId());
		app2 := new Appointment(mk_ModelUtils`Date(2018,12,21,8,30), hos1.getId(), doc1.getId(), pat2.getId());

		-- a doctor and a patient can not have overlapped appointments
		safetyNet.addAppointment(app1);
		safetyNet.addAppointment(app2);

 		safetyNet.clearInstance();
 	
 	)
 
functions

traces

end SystemTest