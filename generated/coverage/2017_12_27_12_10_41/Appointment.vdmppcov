class Appointment
values 
 public APPOINTMENT_TIME_MIN = 30; -- duration of an appointment in minutes
instance variables
	private date : ModelUtils`Date;
  private hospitalId: nat;
  private doctorId: nat;
  private patientId: nat;
  
  -- inv 
	inv hospitalId in set dom SafetyNetNetwork`getInstance().getHospitals() and   -- |
	 		doctorId in set dom SafetyNetNetwork`getInstance().getDoctors() and       -- |Check if they are in the network
	 		patientId in set dom SafetyNetNetwork`getInstance().getPatients() and     -- |
	 		doctorId in set SafetyNetNetwork`getInstance().getHospitals()(hospitalId).getDoctorsIds(); --check if the doctor works in that hospital
	 		
operations
	--constructor
	public Appointment: ModelUtils`Date * nat * nat * nat ==> Appointment
	Appointment(d,hos, doc, pat) == (
		atomic (
			date := d;
			hospitalId := hos;
			doctorId := doc;
			patientId:= pat;
		);
		return self;
	);

		--get appointment date
		public pure getDate: () ==> ModelUtils`Date
		getDate() == (
			return date
		);
				
		--get appointment hospital
		public pure getHospitalId: () ==> nat
		getHospitalId() == (
			return hospitalId
		);
		
		--get appointment doctor
		public pure getDoctorId: () ==> nat
		getDoctorId() == (
			return doctorId
		);
	
		--get appointment patient
		public pure getPatientId: () ==> nat
		getPatientId() == (
			return patientId
		);
		
functions
	--checks if two dates are equal
	static public appointmentDatesDontOverlap: ModelUtils`Date * ModelUtils`Date -> bool
	appointmentDatesDontOverlap(d1,d2) == (
		(ModelUtils`dateToNat(getNextAppointmentDate(d1)) <= ModelUtils`dateToNat(d2)) or
		(ModelUtils`dateToNat(getNextAppointmentDate(d2)) <= ModelUtils`dateToNat(d1)) 
	);
	
	--get next appointment slot date
	static public getNextAppointmentDate: ModelUtils`Date -> ModelUtils`Date
	getNextAppointmentDate(d) == (

		if(d.month = 12 and d.day=30 and d.hour = 23 and d.min >= (ModelUtils`HOUR_MIN - APPOINTMENT_TIME_MIN)) then
			mk_ModelUtils`Date(d.year + 1, 1, 1, 00, (d.min + APPOINTMENT_TIME_MIN) mod ModelUtils`HOUR_MIN)
		elseif(d.day=30 and d.hour = 23 and d.min >= (ModelUtils`HOUR_MIN - APPOINTMENT_TIME_MIN)) then
			mk_ModelUtils`Date(d.year, d.month + 1, 1, 00, (d.min + APPOINTMENT_TIME_MIN) mod ModelUtils`HOUR_MIN)
		elseif (d.hour = 23 and d.min >= (ModelUtils`HOUR_MIN - APPOINTMENT_TIME_MIN)) then
			mk_ModelUtils`Date(d.year, d.month, d.day+1, 00, (d.min + APPOINTMENT_TIME_MIN) mod ModelUtils`HOUR_MIN)
		elseif (d.min >= (ModelUtils`HOUR_MIN - APPOINTMENT_TIME_MIN)) then
			mk_ModelUtils`Date(d.year, d.month, d.day, d.hour + 1, (d.min + APPOINTMENT_TIME_MIN) mod ModelUtils`HOUR_MIN)
		else
			mk_ModelUtils`Date(d.year, d.month, d.day, d.hour, d.min + APPOINTMENT_TIME_MIN)
	);
	
	
end Appointment