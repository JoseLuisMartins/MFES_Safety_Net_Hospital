class SafetyNetNetwork 
instance variables
		private hospitals: map nat to Hospital := { |-> };
		private doctors: map nat to Doctor := { |-> };
		private appointments: set of Appointment := {};
		private static networkInstance: SafetyNetNetwork := new SafetyNetNetwork();
operations

		--main 
		public static main: () ==> ()
		main() ==
		(
			dcl safetyNet: SafetyNetNetwork := SafetyNetNetwork`getInstance();
				
			dcl hos1: Hospital := new Hospital("sao joao","porto",4);
			dcl hos2: Hospital := new Hospital("santo antonio","lisboa",4);
		
			
			dcl doc1: Doctor := new Doctor("jose",<ORTOPEDIA>);
			dcl doc2: Doctor := new Doctor("marcelo",<CARDIOLOGIA>);
		
			dcl ap1: Appointment := new Appointment("paciente jose", mk_Utils`Date(2017,12,21,8), hos1.getId(), doc1.getId());
			dcl ap2: Appointment := new Appointment("paciente maria", mk_Utils`Date(2017,12,21,8),hos1.getId(), doc1.getId());
			dcl ap3: Appointment := new Appointment("paciente susana", mk_Utils`Date(2017,12,21,9),hos1.getId(), doc2.getId());
			
			safetyNet.addHospital(hos1);
			safetyNet.addHospital(hos2);
			
			safetyNet.addDoctor(doc1);
			safetyNet.addDoctor(doc2);
			
			safetyNet.associateDoctorToHospital(hos1.getId(), doc1.getId());
			safetyNet.associateDoctorToHospital(hos2.getId(), doc1.getId());
			safetyNet.associateDoctorToHospital(hos2.getId(), doc2.getId());
			
			safetyNet.addAppointment(ap1);
			safetyNet.addAppointment(ap3);
			
			IO`println("Network");
			IO`println(safetyNet);
			
			IO`println("All Hospitals");
			IO`println(safetyNet.getAllHospitals());
		
			IO`println("Hospitals by name");
			IO`println(safetyNet.getHospitalsByName("sao joao"));
		
			IO`println("Hospitals by location");
			IO`println(safetyNet.getHospitalsByLocation("lisboa"));
			
			IO`println("Hospitals specialties->1");
			IO`println(safetyNet.getHospitalSpecialties(hos1.getId()));
		
			IO`println("Hospitals specialties->2");
			IO`println(safetyNet.getHospitalSpecialties(hos2.getId()));
			
				
			IO`println("Hospitals number appointmens");
			IO`println(safetyNet.getHospitalNumberOfAppointments(hos1.getId()));
		
			IO`println("Hospitals where a doctor works");
			IO`println(safetyNet.getDoctorHospitals(doc1.getId()));
			
			
			IO`println("Removed doc1");
			safetyNet.removeDoctor(doc1);
			
				
			IO`println("Hospitals specialties->1");
			IO`println(safetyNet.getHospitalSpecialties(hos1.getId()));
		
			IO`println("Hospitals specialties->2");
			IO`println(safetyNet.getHospitalSpecialties(hos2.getId()));
				
			IO`println("Hospitals where a doctor works");
			IO`println(safetyNet.getDoctorHospitals(doc1.getId()));
			
			
			
		);


		--constructor
		private SafetyNetNetwork: () ==> SafetyNetNetwork
		SafetyNetNetwork() == return self
		post hospitals = { |-> } and  doctors = { |-> };

		--get network instance
		public pure static getInstance: () ==> SafetyNetNetwork
		getInstance() == return networkInstance;

		--clear network instance
		public static clearInstance: () ==> ()
		clearInstance() == (
			networkInstance := new SafetyNetNetwork(); 
		);
		--add hospital
		public addHospital: Hospital ==> ()
		addHospital(hospital) == (
			hospitals := hospitals ++  { hospital.getId() |-> hospital};
		)
		pre {hospital.getId() } <: hospitals = { |-> } 
		post {hospital.getId() } <: hospitals = { hospital.getId() |-> hospital } ;
		
		--remove an hospital
		public removeHospital: Hospital ==> ()
		removeHospital(hospital) == (			
			hospitals := {hospital.getId()} <-: hospitals;
		)
	  pre {hospital.getId()} <: hospitals = { hospital.getId() |-> hospital } 
		post {hospital.getId()} <: hospitals = { |-> };
		
		--add doctor
		public addDoctor: Doctor ==> ()
		addDoctor(doctor) == (
			doctors := doctors ++  { doctor.getId() |-> doctor};
		)
		pre {doctor.getId() } <: doctors = { |-> }  
		post {doctor.getId() } <: doctors = { doctor.getId() |-> doctor };
		
		--remove doctor from the network and from all the hospitals where he works
		public removeDoctor: Doctor ==> ()
		removeDoctor(doctor) == (
			--remove doctor from network
			doctors := {doctor.getId()} <-: doctors;
			--remove doctor from hospital
			for all h in set rng hospitals do 
				if(doctor.getId() in set h.getDoctorsIds()) then
					h.removeDoctor(doctor.getId())
		)
	  pre {doctor.getId()} <: doctors = { doctor.getId() |-> doctor } 
		post {doctor.getId()} <: doctors = { |-> }; -- imcompleta- falta ver a parte dos hospitais
		
		--associate doctor to hospital
		public associateDoctorToHospital : nat * nat ==> ()
			associateDoctorToHospital(hospitalId, doctorId) == (
				hospitals(hospitalId).addDoctor(doctorId)
		)
		pre hospitalId in set dom hospitals and doctorId in set dom doctors;
		
		--disassociate doctor from hospital
		public disassociateDoctorFromHospital : nat * nat ==> ()
			disassociateDoctorFromHospital(hospitalId, doctorId) == (
				hospitals(hospitalId).removeDoctor(doctorId)
		)
		pre hospitalId in set dom hospitals and doctorId in set dom doctors;
				
		
		--Hospital
		-------search hospitals------------------------------------
		----------get all hospitals
		public getAllHospitals: () ==> set of Hospital
			getAllHospitals() == (
				return rng hospitals;
			);
			
			----------get hospitals by id
		public getHospitalsById: nat ==> Hospital
			getHospitalsById(hospitalId) == (
				return hospitals(hospitalId);
			);
			
		----------get hospitals by location
		public getHospitalsByLocation: Utils`String ==> set of Hospital
			getHospitalsByLocation(location) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
						if(h.getLocation() = location) then
							res := res union {h};
				return res
			);
		
		----------get hospitals by name
		public getHospitalsByName: Utils`String ==> set of Hospital
			getHospitalsByName(name) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
						if(h.getName() = name) then
							res := res union {h};
				return res
			);
			
		-------------------End hospital search--------------------------------
				
		-- get hospitals by specialtie
		public getHospitalSpecialties: nat ==> set of Utils`Specialty
			getHospitalSpecialties(hospitalId) == (
				dcl res : set of Utils`Specialty := {};
					for all doctorId in set hospitals(hospitalId).getDoctorsIds() do
							res := res union {doctors(doctorId).getSpecialty()};
				return res
			);
			
			--get doctor appointments
		public pure getHospitalAppointments: nat ==> set of Appointment
		getHospitalAppointments(hospitalId) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(a.getHospitalId() = hospitalId) then
						res := res union {a}; 
		
			return res
		);
		-- check doctor existence
		-- check type and id 

		-- total number of appointments in a hospital
		public getHospitalNumberOfAppointments: nat ==> nat
			getHospitalNumberOfAppointments(hospitalId) == (
				return card getHospitalAppointments(hospitalId);
			);
			
			
		
		-----------------------end hospital ---------------------------
		
		---------------------------------------------------------
		-----------------------Doctors --------------------------
		---------------------------------------------------------
		
		---getAllDoctors
		
		public getAllDoctors: () ==> set of Doctor
			getAllDoctors() == (
				return rng doctors;
			);
		
		----------get doctor by id
		public getDoctorById: nat ==> Doctor
			getDoctorById(doctorId) == (
				return doctors(doctorId);
			);
			
		
			
		--search doctors--------------------------------
		---get hospitals where a doctor works
		
		public getDoctorHospitals: nat ==> set of Hospital
			getDoctorHospitals(doctorId) == (
				dcl res : set of Hospital := {};
				for all h in set rng hospitals do
					if(doctorId in set h.getDoctorsIds()) then
						res := res union {h};
				return res
			);
			
			
			
		---------------------------------------------------------
		----------------------Appointments-----------------------
		---------------------------------------------------------
		
		--get doctor appointments
		public pure getDoctorAppointments: nat ==> set of Appointment
		getDoctorAppointments(doctorId) == (
			dcl res: set of Appointment := {};
			for all a in set appointments do 
				if(a.getDoctorId() = doctorId) then
						res := res union {a}; 
		
			return res
		);
		-- check doctor existence
		-- check type and id 
		
		
		--add an Appointment
		public addAppointment: Appointment ==> ()
		addAppointment(a) == (
			appointments := appointments union {a}; 
		)
		pre forall ap in set getDoctorAppointments(a.getDoctorId()) & Utils`isDateDiferent(ap.getDate(), a.getDate())
		post a in set appointments;
		
	
		
	
functions
-- TODO Define functiones here
end SafetyNetNetwork