class SafetyNetNetwork
instance variables
		private hospitals: map nat to Hospital := { |-> };
		private doctors: map nat to Doctor := { |-> };
		private static networkInstance: SafetyNetNetwork := new SafetyNetNetwork();
operations
		--constructor
		private SafetyNetNetwork: () ==> SafetyNetNetwork
		SafetyNetNetwork() == return self
		post hospitals = { |-> } and  doctors = { |-> };

		--get network instance
		public pure static getInstance: () ==> SafetyNetNetwork
		getInstance() == return networkInstance;


	  -- returns the hospital with a specified name
		public pure getHospitalbyName: Utils`String ==> [Hospital]
		getHospitalbyName(name) == (
			for all i in set dom hospitals do
				if (hospitals(i).getName() = name) then
					return hospitals(i);
			return nil;
		);
		
		--add hospital
		public addHospital: Hospital ==> ()
		addHospital(hospital) == (
			hospitals := hospitals ++  { hospital.getId() |-> hospital};
		)
		pre {hospital.getId() } <: hospitals = { |-> } 
		post {hospital.getId() } <: hospitals = { hospital.getId() |-> hospital } ;
		
		--remove an hospital
		public removeHospital: Hospital ==> ()
		removeHospital(hospital) == (
			hospitals := {hospital.getId()} <-: hospitals;
		)
	  pre {hospital.getId()} <: hospitals = { hospital.getId() |-> hospital } 
		post {hospital.getId()} <: hospitals = { |-> };
		
		--add doctor
		public addDoctor: Doctor ==> ()
		addDoctor(doctor) == (
			doctors := doctors ++  { doctor.getId() |-> doctor};
		)
		pre {doctor.getId() } <: doctors = { |-> }  
		post {doctor.getId() } <: doctors = { doctor.getId() |-> doctor };
		
		--remove an doctor
		public removeDoctor: Doctor ==> ()
		removeDoctor(doctor) == (
			doctors := {doctor.getId()} <-: doctors;
		)
	  pre {doctor.getId()} <: doctors = { doctor.getId() |-> doctor } 
		post {doctor.getId()} <: doctors = { |-> };
		
		--associate doctor to hospital
		public associateDoctorToHospital : nat * nat ==> ()
			associateDoctorToHospital(hospitalId, doctorId) == (
				hospitals(hospitalId).addDoctor(doctorId)
		)
		pre hospitalId in set dom hospitals and doctorId in set dom doctors;
		
		--disassociate doctor from hospital
		public disassociateDoctorFromHospital : nat * nat ==> ()
			disassociateDoctorFromHospital(hospitalId, doctorId) == (
				hospitals(hospitalId).removeDoctor(doctorId)
		)
		pre hospitalId in set dom hospitals and doctorId in set dom doctors;
				
		
		--search hospitals
		--search doctors
		--add apointment (id hospital, id doctor, appointment)
		
	
functions
-- TODO Define functiones here
end SafetyNetNetwork